EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
PROJET3 AY.exe -- emu8086 assembler version: 4.08  
 
[ 08/01/2012  --  23:58:50 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       .data
[   4]        :                                       
[   5]        :                                       
[   6]    0100: 20 20 20 20 20 20 20 20 20 20 20 20   msg10 db '                       Mini Projet Assembleur no 3 (Manipulation de fichiers)        ',13,10,'$'
                20 20 20 20 20 20 20 20 20 20 20 4D 
                69 6E 69 20 50 72 6F 6A 65 74 20 41 
                73 73 65 6D 62 6C 65 75 72 20 6E 6F 
                20 33 20 28 4D 61 6E 69 70 75 6C 61 
                74 69 6F 6E 20 64 65 20 66 69 63 68 
                69 65 72 73 29 20 20 20 20 20 20 20 
                20 0D 0A 24                         
[   7]    0158: 20 20 20 20 20 20 20 20 20 20 20 20   msg11 db '                              developpe par             ',13,10,'$'
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 64 65 76 65 6C 6F 
                70 70 65 20 70 61 72 20 20 20 20 20 
                20 20 20 20 20 20 20 20 0D 0A 24    
[   8]    0193: 20 20 20 20 20 20 20 20 20 20 20 20   msg12 db '                     AYMEN BEN MHAMED && AYDA REKAYA  ',13,10,'   $'
                20 20 20 20 20 20 20 20 20 41 59 4D 
                45 4E 20 42 45 4E 20 4D 48 41 4D 45 
                44 20 26 26 20 41 59 44 41 20 52 45 
                4B 41 59 41 20 20 0D 0A 20 20 20 24 
                                                    
[   9]    01CF: 10 00 00 00 00 00 00 00 00 00 00 00   nom_fichier db 16,15 dup(?)
                00 00 00 00                         
[  10]    01DF: 0A 41 63 63 65 73 73 20 49 4D 50 4F   refuse DB 0ah,"Access IMPOSSIBLE$"
                53 53 49 42 4C 45 24                
[  11]    01F2: 66 69 63 68 69 65 72 20 69 6E 65 78   msg2 db "fichier inexistant!!! $"
                69 73 74 61 6E 74 21 21 21 20 24    
[  12]    0209: 66 69 63 68 69 65 72 20 64 6F 69 74   msg3 db "fichier doit etre existe dans le repartoire contenant l excutable !!! $"
                20 65 74 72 65 20 65 78 69 73 74 65 
                20 64 61 6E 73 20 6C 65 20 72 65 70 
                61 72 74 6F 69 72 65 20 63 6F 6E 74 
                65 6E 61 6E 74 20 6C 20 65 78 63 75 
                74 61 62 6C 65 20 21 21 21 20 24    
[  13]    0250: 2A 44 6F 6E 6E 65 72 20 6C 65 20 6E   nomfichier db "*Donner le nom de fichier à ouvrir $"
                6F 6D 20 64 65 20 66 69 63 68 69 65 
                72 20 E0 20 6F 75 76 72 69 72 20 24 
                                                    
[  14]    0274: 3D 3D 3D 3D 3E 73 61 69 73 69 65 20   msg1 db "====>saisie 5 entier codé en binaire: $"
                35 20 65 6E 74 69 65 72 20 63 6F 64 
                E9 20 65 6E 20 62 69 6E 61 69 72 65 
                3A 20 24                            
[  15]    029B: 66 69 63 68 69 65 72 20 65 73 74 20   msg15 db "fichier est ouvert avec succes $"
                6F 75 76 65 72 74 20 61 76 65 63 20 
                73 75 63 63 65 73 20 24             
[  16]    02BB: 0A 0D 21 21 63 68 61 71 75 65 20 62   message_entier db 10,13,'!!chaque bit d entier en binaire doit etre soit 0 ou 1 !!$'
                69 74 20 64 20 65 6E 74 69 65 72 20 
                65 6E 20 62 69 6E 61 69 72 65 20 64 
                6F 69 74 20 65 74 72 65 20 73 6F 69 
                74 20 30 20 6F 75 20 31 20 21 21 24 
                                                    
[  17]    02F7: 0A 0D 2A 2A 76 65 75 69 6C 6C 65 7A   mesg_err db 10,13,'**veuillez entrer un entier en binaire code sur 4 bits**',10,13,'$'
                20 65 6E 74 72 65 72 20 75 6E 20 65 
                6E 74 69 65 72 20 65 6E 20 62 69 6E 
                61 69 72 65 20 63 6F 64 65 20 73 75 
                72 20 34 20 62 69 74 73 2A 2A 0A 0D 
                24                                  
[  18]    0334: 00 00                                 handle2 dw ?
[  19]    0336: 09 00 00 00 00 00 00 00 00            entier db 9,8 dup(?)
[  20]    033F: 0D 0A 24                              alaligne db 13,10,'$'
[  21]    0342: 09 00 00 00 00 00 00 00 00            entier2 db 9,8 dup(?)
[  22]    034B: 00                                    somme db ?
[  23]    034C: 0D 0A 20 53 69 20 76 6F 75 73 20 76   msg8 db 13,10,' Si vous voulez sortir, appuyez sur n"importe qu"elle touche du clavier$'
                6F 75 6C 65 7A 20 73 6F 72 74 69 72 
                2C 20 61 70 70 75 79 65 7A 20 73 75 
                72 20 6E 22 69 6D 70 6F 72 74 65 20 
                71 75 22 65 6C 6C 65 20 74 6F 75 63 
                68 65 20 64 75 20 63 6C 61 76 69 65 
                72 24                               
[  24]    0396: 6C 27 65 6E 74 69 65 72 20 72 65 63   msg5 db "l'entier recherche existe dans la ligne$"
                68 65 72 63 68 65 20 65 78 69 73 74 
                65 20 64 61 6E 73 20 6C 61 20 6C 69 
                67 6E 65 24                         
[  25]    03BE: 45 6C 65 6D 65 6E 74 20 65 78 69 73   msg55 db "Element existe dans le fichier $"
                74 65 20 64 61 6E 73 20 6C 65 20 66 
                69 63 68 69 65 72 20 24             
[  26]    03DE: 2A 56 65 75 69 6C 6C 65 7A 20 73 61   msg6 db "*Veuillez saisir un nombre,SVP : $", 0Dh,0Ah
                69 73 69 72 20 75 6E 20 6E 6F 6D 62 
                72 65 2C 53 56 50 3A 20 24 0D 0A    
[  27]    0401: 0D 0A 4C 65 20 6E 6F 6D 62 72 65 20   msg7 db 0Dh,0Ah, "Le nombre en binaire est:       $"
                65 6E 20 62 69 6E 61 69 72 65 20 65 
                73 74 3A 20 20 20 20 20 20 20 24    
[  28]    0424: 00                                    y db ?
[  29]        :                                       .code
[  30]        :                                       
[  31]        :                                       ;===============================================
[  32]        :                                       ;==================================
[  33]        :                                       ;trois macro:couleur et affichage de l'entéte
[  34]        :                                       ;==================================
[  35]        :                                       ;===============================================
[  36]        :                                       attente macro
[  37]        :                                       mov ah,7
[  38]        :                                       int 21h
[  39]        :                                       endm
[  40]        :                                       
[  41]        :                                       
[  42]        :                                       aff_msg macro chn          ;fonction pour afficher les messages
[  43]        :                                       push dx
[  44]        :                                       push ax
[  45]        :                                       lea dx,chn
[  46]        :                                       mov ah,9
[  47]        :                                       int 21h
[  48]        :                                       pop ax
[  49]        :                                       pop dx
[  50]        :                                       endm
[  51]        :                                       
[  52]        :                                       estitique macro  a,c,b       ;fonction permet d'afficher les titres et les entétes
[  53]        :                                       mov bx,c
[  54]        :                                       xor al,al
[  55]        :                                       mov ah,9
[  56]        :                                       mov cx,b
[  57]        :                                       int 10h
[  58]        :                                       lea dx,a
[  59]        :                                       int 21h
[  60]        :                                       endm
[  61]        :                                       
[  62]        :                                       ;===================================
[  63]        :                                       ;ROUTINE:saisie le nom de fichier
[  64]        :                                       ;===================================
[  65]    0430:                                       saisie_nom_fichier proc
[  66]    0430: A0 D0 00                              mov al,nom_fichier[1]
[  67]    0433: 04 02                                 add al,2
[  68]    0435: 32 E4                                 xor ah,ah
[  69]    0437: 8B D8                                 mov bx,ax
[  70]        :                                       
[  71]    0439: C6 87 CF 00 00                        mov nom_fichier[bx],00h
[  72]    043E: B0 02                                 mov al,2
[  73]    0440: B4 3D                                 mov ah,3dh                ;3dh sert a ouvrir un fichier
[  74]    0442: BA D1 00                              mov dx,(offset nom_fichier)+2
[  75]    0445: CD 21                                 int 21h
[  76]        :                                       
[  77]    0447: A3 34 02                              mov handle2,ax           ;handle2 :on l utilise pour accéder au fichier(méthodes pour accéder aux fichiers)
[  78]    044A: 72 02                                 jc erreur1
[  79]    044C: EB 24                                 jmp suivant
[  80]        :                                       
[  81]    044E:                                       erreur1:                 ;cas d erreur d ouverture de fichier
[  82]        :                                       
[  83]    044E: 52 50 BA F2 00 B4 09 CD 21 58 5A      aff_msg msg2
[  84]    0459: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[  85]    0464: 52 50 BA 09 01 B4 09 CD 21 58 5A      aff_msg msg3
[  86]    046F: E9 73 02                              JMP EXIT
[  87]    0472:                                       suivant:
[  88]        :                                       
[  89]    0472: C3                                    ret
[  90]        :                                       saisie_nom_fichier endp
[  91]        :                                       
[  92]        :                                       
[  93]        :                                       ;=====================================
[  94]        :                                       ;MACRO:lecture de fichier
[  95]        :                                       ;=====================================
[  96]        :                                       
[  97]        :                                       ecrirfichier macro handle2,entier
[  98]        :                                       push cx
[  99]        :                                       mov ah,40h                 ; 40f :Ecriture dans un fichier
[ 100]        :                                       mov bx,handle2
[ 101]        :                                       mov cx,6
[ 102]        :                                       mov dx,offset entier
[ 103]        :                                       int 21h
[ 104]        :                                       pop cx
[ 105]        :                                       endm
[ 106]        :                                       
[ 107]        :                                       ;=====================================
[ 108]        :                                       ;MACRO:lecture de fichier
[ 109]        :                                       ;=====================================
[ 110]        :                                       
[ 111]        :                                       lecturefichier macro handle2,entier
[ 112]        :                                       push cx
[ 113]        :                                       mov ah,3fh                 ; 40f :Ecriture dans un fichier
[ 114]        :                                       mov bx,handle2
[ 115]        :                                       mov cx,6
[ 116]        :                                       mov dx,offset entier
[ 117]        :                                       int 21h
[ 118]        :                                       pop cx
[ 119]        :                                       endm
[ 120]        :                                       
[ 121]        :                                       ;=================================================
[ 122]        :                                       ;MACRO:remplissage de fichier par de code binaire
[ 123]        :                                       ;=================================================
[ 124]        :                                       remplir macro handle2,entier
[ 125]        :                                       mov cx,0
[ 126]        :                                       lectur:
[ 127]        :                                       aff_msg alaligne
[ 128]        :                                       mov ah,0ah               ; 0ah(aussi 0ch) fait appel à une saisie au clavier.
[ 129]        :                                       mov dx,offset entier
[ 130]        :                                       int 21h
[ 131]        :                                       
[ 132]        :                                       
[ 133]        :                                       cmp entier[1],4 ; '4:Taille effective de le chaine /ENtier sera ecrit sur 4 bits..
[ 134]        :                                       jne message_erreur
[ 135]        :                                       
[ 136]        :                                       
[ 137]        :                                       
[ 138]        :                                       cmp entier[2],'0'
[ 139]        :                                       je passe
[ 140]        :                                       
[ 141]        :                                       
[ 142]        :                                       cmp entier[2],'1'
[ 143]        :                                       je condit
[ 144]        :                                       
[ 145]        :                                       
[ 146]        :                                       
[ 147]        :                                       condit:
[ 148]        :                                       cmp entier[3],'0'
[ 149]        :                                       jne erreur
[ 150]        :                                       
[ 151]        :                                       cmp entier[4],'0'
[ 152]        :                                       jne erreur
[ 153]        :                                       
[ 154]        :                                       cmp entier[5],'0'
[ 155]        :                                       jl erreur
[ 156]        :                                       
[ 157]        :                                       cmp entier[5],'1'
[ 158]        :                                       jg erreur
[ 159]        :                                       
[ 160]        :                                       
[ 161]        :                                       passe:
[ 162]        :                                       cmp entier[3],'0'
[ 163]        :                                       jl erreur
[ 164]        :                                       
[ 165]        :                                       cmp entier[3],'1'
[ 166]        :                                       jg erreur
[ 167]        :                                       
[ 168]        :                                       cmp entier[4],'0'
[ 169]        :                                       jl erreur
[ 170]        :                                       
[ 171]        :                                       cmp entier[4],'1'
[ 172]        :                                       jg erreur
[ 173]        :                                       
[ 174]        :                                       cmp entier[5],'0'
[ 175]        :                                       jl erreur
[ 176]        :                                       
[ 177]        :                                       cmp entier[5],'1'
[ 178]        :                                       jg erreur
[ 179]        :                                       
[ 180]        :                                       ecrir:
[ 181]        :                                       ecrirfichier handle2,entier
[ 182]        :                                       
[ 183]        :                                       jmp suivant1
[ 184]        :                                       
[ 185]        :                                       
[ 186]        :                                       erreur:                    ;err si le chiffre de chaque entier est diff de 1 ou 0
[ 187]        :                                       aff_msg message_entier
[ 188]        :                                       
[ 189]        :                                       
[ 190]        :                                       message_erreur:            ;err si la taille de l entier est diff de 4 bit
[ 191]        :                                       aff_msg mesg_err
[ 192]        :                                       
[ 193]        :                                       suivant1:
[ 194]        :                                       
[ 195]        :                                       
[ 196]        :                                       
[ 197]        :                                       endm
[ 198]        :                                       
[ 199]        :                                       ;==========================================
[ 200]        :                                       ;MACRO: saisie de l'entier codé en decimal
[ 201]        :                                       ;==========================================
[ 202]        :                                       saisir macro somme,msg6
[ 203]        :                                       
[ 204]        :                                       aff_msg msg6
[ 205]        :                                       faire:
[ 206]        :                                       mov ah,1
[ 207]        :                                       int 21h                            ;entier decimal entre O et 9
[ 208]        :                                       mov [somme],al                     ;   car le fichier comporte que entre 0 et 9
[ 209]        :                                       cmp al,'9'
[ 210]        :                                       jg faire
[ 211]        :                                       cmp al,'0'
[ 212]        :                                       jl faire
[ 213]        :                                       aff_msg alaligne
[ 214]        :                                       endm
[ 215]        :                                       
[ 216]        :                                       
[ 217]        :                                       ;=================================================
[ 218]        :                                       ;MACRO: La trasformation en binaire
[ 219]        :                                       ;=================================================
[ 220]        :                                       transforme macro entier,somme,entier2,msg7
[ 221]        :                                       mov cl,somme
[ 222]        :                                       
[ 223]        :                                       
[ 224]        :                                       ;macro de tranforamtion decimale-binaire
[ 225]        :                                       mov si,offset entier2
[ 226]        :                                       
[ 227]        :                                       mov bx,4
[ 228]        :                                       mov ax,cx
[ 229]        :                                       ;sub ax,48
[ 230]        :                                       mov cx,4
[ 231]        :                                       calcul:
[ 232]        :                                       mov bl,2                            ; 2 est la base de calcul
[ 233]        :                                       div bl
[ 234]        :                                       push ax
[ 235]        :                                       add ah,48
[ 236]        :                                       mov byte ptr[si],ah                 ;byte ptr:la taille(1 octet=1 bit) de la variable dans
[ 237]        :                                       inc si                              ;     laquelle on a stocké le nombre
[ 238]        :                                       dec cx
[ 239]        :                                       pop ax
[ 240]        :                                       cmp cx,0
[ 241]        :                                       jne calcul
[ 242]        :                                       mov byte ptr[si],'$'
[ 243]        :                                       
[ 244]        :                                       mov bx,3
[ 245]        :                                       mov cx,0
[ 246]        :                                       mov si,offset entier
[ 247]        :                                       saisi:
[ 248]        :                                       mov al,entier2[bx]
[ 249]        :                                       
[ 250]        :                                       
[ 251]        :                                       mov byte ptr[si],al
[ 252]        :                                       inc si
[ 253]        :                                       dec bx
[ 254]        :                                       inc cx
[ 255]        :                                       cmp cx,4
[ 256]        :                                       jne saisi
[ 257]        :                                       mov byte ptr[si],'$'
[ 258]        :                                       aff_msg msg7
[ 259]        :                                       
[ 260]        :                                       mov ah,9
[ 261]        :                                       mov dx,offset entier
[ 262]        :                                       int 21h
[ 263]        :                                       
[ 264]        :                                       endm
[ 265]        :                                       
[ 266]        :                                       ;============================================================
[ 267]        :                                       ;MACRO: comparaison de l entier saisie avec celle de fichier
[ 268]        :                                       ;============================================================
[ 269]        :                                       comparaison macro entier, entier2,msg5
[ 270]        :                                       
[ 271]        :                                       mov si,offset entier           ;on compare notre entier à celle dan le fichier
[ 272]        :                                       mov bx ,0
[ 273]        :                                       compare:
[ 274]        :                                       mov al,byte ptr[si]            ;byte ptr:la taille(1 octet=1 bit) de la variable dans
[ 275]        :                                       ;mov ah,chaine2[bx]            ;     laquelle on a stocké le nombre
[ 276]        :                                       
[ 277]        :                                       cmp al,entier2[bx]
[ 278]        :                                       jne suivant2
[ 279]        :                                       inc si
[ 280]        :                                       inc bx
[ 281]        :                                       cmp bx,4
[ 282]        :                                       je suivant11
[ 283]        :                                       jne compare
[ 284]        :                                       suivant11:
[ 285]        :                                       aff_msg msg5
[ 286]        :                                       mov al,cl
[ 287]        :                                       add al,48
[ 288]        :                                       mov dl,al
[ 289]        :                                       mov ah,6
[ 290]        :                                       int 21h
[ 291]        :                                       suivant2:
[ 292]        :                                       endm
[ 293]        :                                       ;======================================================
[ 294]        :                                       ;MACRO: recherche dans le fichier
[ 295]        :                                       ;======================================================
[ 296]        :                                       recherche macro handle2,entier2,entier,y
[ 297]        :                                       mov ah,42h
[ 298]        :                                       mov al,0
[ 299]        :                                       mov bx,handle2
[ 300]        :                                       mov cx,0
[ 301]        :                                       mov dx,0
[ 302]        :                                       int 21h
[ 303]        :                                       mov cx,1
[ 304]        :                                       rech:
[ 305]        :                                       push cx
[ 306]        :                                       mov ah,3fh
[ 307]        :                                       mov bx,handle2
[ 308]        :                                       mov cx,4
[ 309]        :                                       mov dx,offset entier
[ 310]        :                                       int 21h
[ 311]        :                                       pop cx
[ 312]        :                                       comparaison entier,entier2 ,msg5
[ 313]        :                                       push cx
[ 314]        :                                       mov ah,42h
[ 315]        :                                       mov al,1
[ 316]        :                                       mov bx,handle2
[ 317]        :                                       mov cx,0
[ 318]        :                                       mov dx,2
[ 319]        :                                       int 21h
[ 320]        :                                       pop cx
[ 321]        :                                       inc cx
[ 322]        :                                       mov al,cl
[ 323]        :                                       cmp al,y
[ 324]        :                                       jne rech
[ 325]        :                                       aff_msg msg55
[ 326]        :                                       endm
[ 327]        :                                       
[ 328]        :                                       
[ 329]        :                                       
[ 330]        :                                       ;===============================================
[ 331]        :                                       ;===============================================
[ 332]        :                                       ;====PROGRAMME PRINCIPALE=======================
[ 333]        :                                       ;===============================================
[ 334]        :                                       ;===============================================
[ 335]        :                                       
[ 336]    0473:                                       main  proc
[ 337]        :                                       
[ 338]    0473: B8 10 00                              mov ax,@data
[ 339]    0476: 8E D8                                 mov ds,ax
[ 340]        :                                       
[ 341]        :                                       
[ 342]        :                                       
[ 343]    0478: BB 85 00 32 C0 B4 09 B9 4D 00 CD 10   estitique  msg10,85h,77
                BA 00 00 CD 21                      
[ 344]    0489: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 345]    0494: BB 06 00 32 C0 B4 09 B9 46 00 CD 10   estitique  msg11,6,70
                BA 58 00 CD 21                      
[ 346]    04A5: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 347]    04B0: BB 04 00 32 C0 B4 09 B9 46 00 CD 10   estitique  msg12,4,70
                BA 93 00 CD 21                      
[ 348]    04C1: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 349]        :                                       
[ 350]        :                                       
[ 351]    04CC: 52 50 BA 50 01 B4 09 CD 21 58 5A      aff_msg nomfichier
[ 352]    04D7: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 353]    04E2: B4 0A                                 mov ah,0ah
[ 354]    04E4: BA CF 00                              lea dx,nom_fichier
[ 355]    04E7: CD 21                                 int 21h
[ 356]    04E9: E8 44 FF                              call saisie_nom_fichier     ;appel à la routine saisie_nom_fichier
[ 357]    04EC: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 358]    04F7: 52 50 BA 9B 01 B4 09 CD 21 58 5A      aff_msg msg15
[ 359]    0502: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 360]    050D: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 361]    0518: 52 50 BA 74 01 B4 09 CD 21 58 5A      aff_msg msg1
[ 362]    0523: BE 00 00                              mov si,0
[ 363]    0526:                                       pour:
[ 364]    0526: 83 FE 05                              cmp si,5
[ 365]    0529: 75 03 E9 9C 00                        je saut
[ 366]    052E: B9 00 00 52 50 BA 3F 02 B4 09 CD 21   remplir handle2,entier,@y
                58 5A B4 0A BA 36 02 CD 21 80 3E 37 
                02 04 75 71 80 3E 38 02 30 74 23 80 
                3E 38 02 31 74 00 80 3E 39 02 30 75 
                51 80 3E 3A 02 30 75 4A 80 3E 3B 02 
                30 7C 43 80 3E 3B 02 31 7F 3C 80 3E 
                39 02 30 7C 35 80 3E 39 02 31 7F 2E 
                80 3E 3A 02 30 7C 27 80 3E 3A 02 31 
                7F 20 80 3E 3B 02 30 7C 19 80 3E 3B 
                02 31 7F 12 51 B4 40 8B 1E 34 02 B9 
                06 00 BA 36 02 CD 21 59 EB 16 52 50 
                BA BB 01 B4 09 CD 21 58 5A 52 50 BA 
                F7 01 B4 09 CD 21 58 5A             
[ 367]    05C6: 46                                    inc si
[ 368]    05C7: E9 5C FF                              jmp pour
[ 369]    05CA:                                       saut:
[ 370]    05CA: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 371]    05D5: 51 B4 3F 8B 1E 34 02 B9 06 00 BA 36   lecturefichier handle2,entier
                02 CD 21 59                         
[ 372]    05E5: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 373]    05F0: 52 50 BA DE 02 B4 09 CD 21 58 5A B4   saisir somme,msg6
                01 CD 21 A2 4B 02 3C 39 7F F5 3C 30 
                7C F1 52 50 BA 3F 02 B4 09 CD 21 58 
                5A                                  
[ 374]    0615: 8A 0E 4B 02 BE 42 02 BB 04 00 8B C1   transforme entier,somme,entier2,msg7
                B9 04 00 B3 02 F6 F3 50 80 C4 30 88 
                24 46 49 58 83 F9 00 75 EE C6 04 24 
                BB 03 00 B9 00 00 BE 36 02 8A 87 42 
                02 88 04 46 4B 41 83 F9 04 75 F2 C6 
                04 24 52 50 BA 01 03 B4 09 CD 21 58 
                5A B4 09 BA 36 02 CD 21             
[ 375]    0665: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 376]    0670: B4 42 B0 00 8B 1E 34 02 B9 00 00 BA   recherche handle2,entier2,entier,y
                00 00 CD 21 B9 01 00 51 B4 3F 8B 1E 
                34 02 B9 04 00 BA 36 02 CD 21 59 BE 
                36 02 BB 00 00 8A 04 3A 87 42 02 75 
                1E 46 43 83 FB 04 74 02 75 EF 52 50 
                BA 96 02 B4 09 CD 21 58 5A 8A C1 04 
                30 8A D0 B4 06 CD 21 51 B4 42 B0 01 
                8B 1E 34 02 B9 00 00 BA 02 00 CD 21 
                59 41 8A C1 3A 06 24 03 75 A9 52 50 
                BA BE 02 B4 09 CD 21 58 5A          
[ 377]        :                                       
[ 378]        :                                       
[ 379]        :                                       
[ 380]    06E5:                                       EXIT:
[ 381]    06E5: 52 50 BA 3F 02 B4 09 CD 21 58 5A      aff_msg alaligne
[ 382]    06F0: BB 0C 00 32 C0 B4 09 B9 46 00 CD 10   estitique msg8,0ch,70
                BA 4C 02 CD 21                      
[ 383]    0701: B4 07 CD 21                           attente
[ 384]        :                                       
[ 385]        :                                       main endp
[ 386]        :                                       end main
[ 387]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 05      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 05      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: EB      -   check sum (l.byte)
0013: FA      -   check sum (h.byte)
0014: 43      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 43      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 44      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 43      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
